/*+----------------------------------------------------------------+
  |	Title:		LogicLog.cpp [共通環境]
  |	Comment:	ロジック：ログ（※解析で確定したマスやヒントの情報）
  |	Author:		K.Takayanagi
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
  +----------------------------------------------------------------+*/
#include "env.hpp"
#include "LogicLog.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Struct		構造体型宣言
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Program		プログラム実装
  +----------------------------------------------------------------+*/
//-----------------------
// コンストラクタ
//-----------------------
CLogicLog::CLogicLog( void ){
    clear();
}

//-----------------------
// デストラクタ
//-----------------------
CLogicLog::~CLogicLog( void ){
}

//-----------------------
// クリア
//-----------------------
void CLogicLog::clear( void ){
    reset();
}

//-----------------------
// リセット
//-----------------------
void CLogicLog::reset( void ){
    m_nLogNum = 0;
    m_nNextLogAt = 0;
}

//----------------------------------------------
// ログの取り出し（※古い順／ログがなければ[NULL]が返る）
//----------------------------------------------
CLogicLogCell* CLogicLog::getNextLog( void ){
    // 要素がなければ返す
    if( m_nLogNum <= 0 ){
        return( NULL );
    }

    // 用心
    if( m_nNextLogAt < 0 || m_nNextLogAt >= LOGIC_LOG_CELL_MAX ){
        LOGE( "@ CLogicLog::getNextLog: INVALID: at=%d\n", m_nNextLogAt );
        return( NULL );
    }

    // 要素を減らす
    m_nLogNum--;

    // 指定位置のログを返す（※次回に備えてインクリメント）
    return( &m_oArrCell[m_nNextLogAt++] );
}

//-----------------------
// 設定（実体）
//-----------------------
CLogicLogCell* CLogicLog::addLog( eLLC_TYPE type, int p0, int p1, int p2, int p3 ){
    if( m_nLogNum >= LOGIC_LOG_CELL_MAX ){
        LOGE( "@ CLogicLog::addLog: BUF SHORTAGE: num=%d/%d\n", m_nLogNum, LOGIC_LOG_CELL_MAX );
        return( NULL );
    }
    
    // 対象のセルに設定＆ログ数のインクリメント
    CLogicLogCell* pCell = &m_oArrCell[m_nLogNum++];
    pCell->set( type, p0, p1, p2, p3 );

    return( pCell );
}

//-------------------------
// 直近のログの確認
//-------------------------
CLogicLogCell* CLogicLog::getLastLog( void ){
    // 要素がなければ返す
    if( m_nLogNum <= 0 ){
        return( NULL );
    }
    
    return( &m_oArrCell[m_nLogNum-1] );
}

//------------------------------------------------------------
// 直近のログを１つ削除する（※登録した開始ログに対するログが空っぽの場合等）
//------------------------------------------------------------
void CLogicLog::removeLastLog( void ){
    // 要素があれば
    if( m_nLogNum > 0 ){
        m_nLogNum--;
    }
}
