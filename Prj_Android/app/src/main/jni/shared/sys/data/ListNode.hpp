/*+----------------------------------------------------------------+
  |	Title:		ListNode.hpp [共通環境]
  |	Comment:	リスト要素（※CListに登録したい場合に派生する）
  |	Author:		K.Takayanagi
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Header Define	ヘッダ定義
  +----------------------------------------------------------------+*/
#ifndef __LIST_NODE_HPP__
#define __LIST_NODE_HPP__

/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
  +----------------------------------------------------------------+*/
#include "env.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
  +----------------------------------------------------------------+*/
#define IMPLEMENT_NODE( _CLASS_NAME )                                               \
    public:                                                                         \
        inline _CLASS_NAME* getNext( void ){ return( (_CLASS_NAME*)getNext0() ); }  \
        inline _CLASS_NAME* getPrev( void ){ return( (_CLASS_NAME*)getPrev0() ); }

/*+----------------------------------------------------------------+
  |	Struct		構造体型宣言
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Class		クラス定義
  +----------------------------------------------------------------+*/
//----------------------------------------
// リストノード
//----------------------------------------
class CListNode{
protected:
	// ユニークID（※ID管理をする場合は[0]以上の値を有効とする／負で無効値）
	int m_nUid;

	// リンク要素
	CListNode*	m_pPrev;
	CListNode*	m_pNext;

public:
	CListNode( void );
	virtual ~CListNode( void ){}

	// uid
	inline int getUid( void ){ return( m_nUid ); }
	inline void setUid( int uid ){ m_nUid = uid; }

	// 取得
	inline CListNode* getPrev0( void ){ return( m_pPrev ); }
	inline CListNode* getNext0( void ){ return( m_pNext ); }

	// 接続
	void connectPrev( CListNode* pPrev );
	void connectNext( CListNode* pNext );

	// 切断
	void disconnect( void );
};

/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
  +----------------------------------------------------------------+*/

#endif /* __LIST_NODE_HPP__ */
