/*+----------------------------------------------------------------+
  |	Title:		sdarc.hpp [共通環境]
  |	Comment:	シンプルなデータ解凍処理(※[simplearc.exe]の実装に依存)
  |				[TYPE3_1]にのみ対応（※DXT1/DXT5の分割には対応しない）
  |	Author:		K.Takayanagi
 +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Header Define	ヘッダ定義
 +----------------------------------------------------------------+*/
#ifndef	__SDARC_HPP__
#define	__SDARC_HPP__

/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
 +----------------------------------------------------------------+*/
#include "env.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
 +----------------------------------------------------------------+*/
//-----------------
// 圧縮タイプ
//-----------------
enum eSDARC_TYPE{
    eSDARC_TYPE_1,	// [非対応]：ランレングス＆ハフマン＆スライド辞書
    eSDARC_TYPE_2,	// [非対応]：ランレングス
    eSDARC_TYPE_3,	// スライド辞書[WORD単位]
    eSDARC_TYPE_4,	// [非対応]：スライド辞書[BYTE単位]
    eSDARC_TYPE_5,	// [非対応]：ハフマン
    eSDARC_TYPE_6,	// [非対応]：ハフマン＋α
    eSDARC_TYPE_MAX,

    // 圧縮タイプ無：指定圧縮形式が非効率な場合には生データが吐き出される
    eSDARC_TYPE_INVALID = 255,
};

//-----------------
// 調整タイプ列挙子
//-----------------
enum eSDARC_ADJ_TYPE{
    eSDARC_ADJ_TYPE_DXT1,	// [非対応]：DXT1調整
    eSDARC_ADJ_TYPE_DXT5,	// [非対応]：DXT5調整
    eSDARC_ADJ_TYPE_MAX,

    // 調整無し
    eSDARC_ADJ_TYPE_INVALID = 255,
};

//---------------------------------------------------
// データ分割数：データによって以下のように分割されて圧縮される
//---------------------------------------------------
// DXT1：パレット部分／ドット部分
// DXT5：色味部分／アルファ部分
//---------------------------------------------------
#define	SDARC_DATA_BLOCK_NUM		2

/*+----------------------------------------------------------------+
  |	Struct		構造体型宣言
 +----------------------------------------------------------------+*/
//--------------------
// ヘッダ
//--------------------
struct stSDARC_HEADER{
	BYTE	signature[4];		// シグネチャ[0x89, S, A, P]
	WORD	option;				// 圧縮オプション
	BYTE	arrType[SDARC_DATA_BLOCK_NUM];	// 圧縮タイプ
	DWORD	arrSize[SDARC_DATA_BLOCK_NUM];	// 元サイズ
	DWORD	arrOfs[SDARC_DATA_BLOCK_NUM];	// データへのオフセット
};

/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
 +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
 +----------------------------------------------------------------+*/
// 有効性と解凍に必要なバッファサイズの確認
extern bool sdarc_is_valid( void* inp_buf, uint32 inp_size, uint32* pReqBufSize );

// ヘッダ取得
extern bool sdarc_get_header( stSDARC_HEADER* pHeader, void* pBuf, uint32 size );

// 解凍処理
extern uint32 sdarc_unpack( void* out_buf, uint32 buf_size, void* inp_buf, uint32 inp_size );

// 圧縮処理（※アプリ内での保存用）
extern uint32 sdarc_pack( void* out_buf, uint32 buf_size, void* inp_buf, uint32 inp_size );

#endif	// __SDARC_HPP__
