/*+----------------------------------------------------------------+
  |	Title:		new_delete.hpp [共通環境]
  |	Comment:	new/delete関連
  |	Author:		K.Takayanagi
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Header Define	ヘッダ定義
  +----------------------------------------------------------------+*/
#ifndef	__NEW_DELETE_HPP__
#define	__NEW_DELETE_HPP__

/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
  +----------------------------------------------------------------+*/
#include "env.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
  +----------------------------------------------------------------+*/
// メモリ確保は基本的に、[CMemMgr]を経由して行う

//-----------------------------------------------------------------
// [new]/[delete]
//-----------------------------------------------------------------
// [new]は、[StartAllocFrom]～[EndAlloc]により確保先を指定
#define	SAFE_DELETE( _p )		if( (_p) != NULL ){ delete (_p); (_p) = NULL; }
#define SAFE_DELETE_ARRAY( _p )	if( (_p) != NULL ){ delete[] (_p); (_p) = NULL; }

//-----------------------------------------------------------------
// [malloc]/[free]
//-----------------------------------------------------------------
// [malloc]は、[MALLOC]を用いること
#define SAFE_FREE( _p )			if( (_p) != NULL ){ CMemMgr::Free(_p); (_p) = NULL; }

// アライメント
#define MEM_ALLOC_ALIGNMENT   8

/*+----------------------------------------------------------------+
  |	Struct		構造体定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
  +----------------------------------------------------------------+*/
// malloc
extern void* MALLOC( size_t size );

// new/delete
extern void* operator new( size_t size );
extern void* operator new( size_t size, void* pAddr );
extern void  operator delete( void* pAddr );

// new[]/delete[]
extern void* operator new[]( size_t size );
extern void* operator new[]( size_t size, void* Buff );
extern void  operator delete[]( void* pAddr );

#endif	/* __NEW_DELETE_HPP__ */
